Alchemist=function(e){"use strict";function t(e){this.setElement(e)}var n,i,u;return i=t,n=t.prototype,i.className="Alchemist",u={},u.invalidElement="Invalid or unknown element was specified.",u.invalidElement=new Error(u.invalidElement),n.asElement=function(e){return e.constructor===String&&(e=document.querySelector(e)),"undefined"!=typeof jQuery&&e.constructor===jQuery&&(e=e.get(0)),e instanceof Element&&"TEMPLATE"===e.tagName&&(e=e.content),e instanceof DocumentFragment&&e.hasChildNodes()&&(e=e.firstElementChild),e instanceof Element?e:u.invalidElement},n.setElement=function(e){return this.element=this.asElement(e),this.element},n.getElement=function(){return this.element},n.toString=function(){return"[object "+this.name+"]"},t}(),new Nudist(Alchemist),Nudist=function(){"use strict";function e(e,t){this.expose(e,t)}var t,n;return n=e,t=e.prototype,n.className="Nudist",t.expose=function(e,t){"function"==typeof define&&define(e.name.toLowerCase(),[],function(){return e}),"undefined"!=typeof module&&(module.exports=e),"undefined"!=typeof window&&(window[e.name]=e),"undefined"!=typeof global&&(global[e.name]=e),t[e.name]=e},t.toString=function(){return"[object "+this.name+"]"},e}(),function(){if(this.queue)for(var e=0;e<this.queue.length;e++)new Nudist(this.queue[e],this)}.call(this),new Nudist(Nudist,this),Template=function(e){"use strict";function t(e,t){var n,i,u;return n=/[.{}]/g,i=function(e){return e},u=function(e,t){return e[t]},t.split(n).filter(i).reduce(u,e)}function n(e){return!!e}function i(e){this.initialize(),this.setElement(e)}var u,o;return o=i,u=i.prototype,o.className="Template",u.setElement=function(e){return"undefined"!=typeof Alchemist&&(e=Alchemist.prototype.asElement(e)),this.element=e,e},u.compile=function(e,n){var i,u;return i=/\{([^}]+)\}/g,u=function(e,i){return t(n,i)},e=e.trim(),e=e.replace(i,u)},u.crawl=function(e,t){var n,i,u,o;return u=this,o=arguments,n=function(e){var n,i;return i=function(n){var i;e.hasAttribute(n.name)&&(i=u.compile(n.value,t),e.setAttribute(n.name,i))},n=[].slice.call(e.attributes,0),n.map(i)},i=function(){var n,i,o,r,s=document.TEXT_NODE,c=document.ELEMENT_NODE;return n=function(t,n,i){e.childNodes[n]=u.crawl(t,i)},i=function(t,n,i){var o;o=u.compile(t.textContent,i),console.log(o),e.childNodes[n].innerHTML=o.outerHTML},r=function(e,u){e.nodeType===s&&i(e,u,t),e.nodeType===c&&n(e,u,t)},o=[].slice.call(e.childNodes,0),o.map(r)},e.hasAttributes()&&n(e,t),e.hasChildNodes()&&i(e,t),e},u.prepare=function(e){var t,i,u,o;return n(e)?(t=this.element.cloneNode(!0),o=this.crawl(t,e),i=t.innerHTML,u=/\{([^}]+)\}/g,t):void 0},u.pipe=function(){},u.initialize=function(){this.pipeline=[]},u.toString=function(){return"[object "+this.name+"]"},i}(),function(e){"use strict";return"undefined"==typeof Nudist?(this.queue=this.queue||[],this.queue.push(e)):new Nudist(e,this)}.call(this,Template);
//# sourceMappingURL=data:application/json;base64,
