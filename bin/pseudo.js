// Generated by LiveScript 1.5.0
var ref$, first, last, reject, find, Obj, nsIURI, nsIPrincipal, DOMTokenList, HTMLCollection, NodeList, Attr, NamedNodeMap, EventTarget, Node, Document, ParentNode, ChildNode, NonDocumentTypeChildNode, Element, document, doctype, html, head, body, provide, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('prelude-ls'), first = ref$.first, last = ref$.last, reject = ref$.reject, find = ref$.find, Obj = ref$.Obj;
nsIURI = (function(){
  nsIURI.displayName = 'nsIURI';
  var prototype = nsIURI.prototype, constructor = nsIURI;
  function nsIURI(){}
  return nsIURI;
}());
nsIPrincipal = (function(){
  nsIPrincipal.displayName = 'nsIPrincipal';
  var prototype = nsIPrincipal.prototype, constructor = nsIPrincipal;
  function nsIPrincipal(){}
  return nsIPrincipal;
}());
DOMTokenList = (function(){
  DOMTokenList.displayName = 'DOMTokenList';
  var prototype = DOMTokenList.prototype, constructor = DOMTokenList;
  function DOMTokenList(){}
  return DOMTokenList;
}());
HTMLCollection = (function(){
  HTMLCollection.displayName = 'HTMLCollection';
  var prototype = HTMLCollection.prototype, constructor = HTMLCollection;
  function HTMLCollection(){}
  return HTMLCollection;
}());
NodeList = (function(){
  NodeList.displayName = 'NodeList';
  var prototype = NodeList.prototype, constructor = NodeList;
  NodeList.prototype.length = 0;
  NodeList.prototype.item = function(id){};
  function NodeList(){}
  return NodeList;
}());
Attr = (function(){
  Attr.displayName = 'Attr';
  var prototype = Attr.prototype, constructor = Attr;
  Attr.prototype.name = '';
  Attr.prototype.value = '';
  function Attr(){}
  return Attr;
}());
NamedNodeMap = (function(){
  NamedNodeMap.displayName = 'NamedNodeMap';
  var prototype = NamedNodeMap.prototype, constructor = NamedNodeMap;
  NamedNodeMap.prototype.length = 0;
  NamedNodeMap.prototype.getNamedItem = function(name){
    var this$ = this;
    return find(function(it){
      return it.name === name;
    })((function(){
      var i$, x$, len$, results$ = [];
      for (i$ = 0, len$ = (this).length; i$ < len$; ++i$) {
        x$ = (this)[i$];
        results$.push(x$);
      }
      return results$;
    }.call(this)));
  };
  NamedNodeMap.prototype.setNamedItem = function(name, value){
    var ref$;
    this.removeNamedItem(name);
    return this[this.length] = (ref$ = new Attr(), ref$.name = name, ref$.value = value, ref$);
  };
  NamedNodeMap.prototype.removeNamedItem = function(){
    var this$ = this;
    return importAll$(this, reject(function(it){
      return it.name === name;
    }, (function(){
      var i$, x$, len$, results$ = [];
      for (i$ = 0, len$ = (this).length; i$ < len$; ++i$) {
        x$ = (this)[i$];
        results$.push(x$);
      }
      return results$;
    }.call(this))));
  };
  NamedNodeMap.prototype.item = function(index){
    return this[index];
  };
  NamedNodeMap.prototype.getNamedItemNS = function(){};
  NamedNodeMap.prototype.setNamedItemNS = function(){};
  NamedNodeMap.prototype.removeNamedItemNS = function(){};
  function NamedNodeMap(){}
  return NamedNodeMap;
}());
EventTarget = (function(){
  EventTarget.displayName = 'EventTarget';
  var prototype = EventTarget.prototype, constructor = EventTarget;
  EventTarget.prototype.addEventListener = function(){};
  EventTarget.prototype.removeEventListener = function(){};
  EventTarget.prototype.dispatchEvent = function(){};
  function EventTarget(){}
  return EventTarget;
}());
Node = (function(){
  Node.displayName = 'Node';
  var prototype = Node.prototype, constructor = Node;
  Node.ELEMENT_NODE = 1;
  Node.TEXT_NODE = 3;
  Node.PROCESSING_INSTRUCTION_NODE = 7;
  Node.COMMENT_NODE = 8;
  Node.DOCUMENT_NODE = 9;
  Node.DOCUMENT_TYPE_NODE = 10;
  Node.DOCUMENT_FRAGMENT_NODE = 11;
  Node.prototype.baseURI = String;
  Node.prototype.baseURIObject = nsIURI;
  Node.prototype.childNodes = NodeList;
  Object.defineProperty(Node.prototype, 'firstChild', {
    get: function(){
      return first((function(){
        var i$, x$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = this.childNodes).length; i$ < len$; ++i$) {
          x$ = ref$[i$];
          results$.push(x$);
        }
        return results$;
      }.call(this)));
    },
    configurable: true,
    enumerable: true
  });
  Node.prototype.lastChild = Node;
  Node.prototype.nextSibling = Node;
  Node.prototype.nodeName = String;
  Node.prototype.nodePrincipal = nsIPrincipal;
  Node.prototype.nodeType = Number;
  Node.prototype.nodeValue = String;
  Node.prototype.ownerDocument = Document;
  Node.prototype.parentNode = null && Node;
  Node.prototype.parentElement = null && Element;
  Node.prototype.previousSibling = Node;
  Node.prototype.rootNode = Node;
  Node.prototype.textContent = String;
  Node.prototype.appendChild = function(node){
    var ref$;
    (ref$ = this.childNodes)[ref$.length] = node;
    this.childNodes.length++;
    node.parentNode = this;
    if (this.nodeType === Node.ELEMENT_NODE) {
      return node.parentElement = this;
    }
  };
  Node.prototype.cloneNode = function(Node){
    return Node;
  };
  Node.prototype.compareDocumentPosition = function(){};
  Node.prototype.contains = function(){};
  Node.prototype.hasChildNodes = function(){
    return Boolean;
  };
  Node.prototype.insertBefore = function(Node1, Node2){
    return Node;
  };
  Node.prototype.isDefaultNamespace = function(){};
  Node.prototype.isEqualNode = function(){
    return Boolean;
  };
  Node.prototype.isSameNode = function(){};
  Node.prototype.lookupPrefix = function(){};
  Node.prototype.lookupNamespaceURI = function(){};
  Node.prototype.normalize = function(){};
  Node.prototype.removeChild = function(Node){};
  Node.prototype.replaceChild = function(Node1, Node2){
    return Node;
  };
  function Node(){
    this.childNodes = new NodeList();
  }
  return Node;
}());
Document = (function(superclass){
  var prototype = extend$((import$(Document, superclass).displayName = 'Document', Document), superclass).prototype, constructor = Document;
  Document.prototype.nodeType = Node.DOCUMENT_NODE;
  Document.prototype.doctype = Node;
  Document.prototype.head = Element;
  Document.prototype.body = Element;
  Document.prototype.title = String;
  Document.prototype.createTextNode = function(it){
    var node;
    node = new Node();
    node.nodeType = Node.TEXT_NODE;
    node.nodeValue = it;
    node.textContent = it;
    node.ownerDocument = this;
    return node;
  };
  Document.prototype.createElement = function(it){
    var element;
    element = new Element();
    element.nodeType = Node.ELEMENT_NODE;
    element.tagname = it || 'div';
    element.ownerDocument = this;
    return element;
  };
  Document.prototype.toString = function(){
    return '[object HTMLDocument]';
  };
  function Document(){}
  return Document;
}(Node));
ParentNode = (function(){
  ParentNode.displayName = 'ParentNode';
  var prototype = ParentNode.prototype, constructor = ParentNode;
  ParentNode.prototype.children = HTMLCollection;
  ParentNode.prototype.firstElementChild = Element;
  ParentNode.prototype.lastElementChild = Element;
  ParentNode.prototype.childElementCount = Number;
  ParentNode.prototype.append = function(Node){
    Node || (Node = String);
  };
  ParentNode.prototype.prepend = function(Node){
    Node || (Node = String);
  };
  function ParentNode(){}
  return ParentNode;
}());
ChildNode = (function(){
  ChildNode.displayName = 'ChildNode';
  var prototype = ChildNode.prototype, constructor = ChildNode;
  ChildNode.prototype.remove = function(){};
  ChildNode.prototype.before = function(Node){
    Node || (Node = String);
  };
  ChildNode.prototype.after = function(Node){
    Node || (Node = String);
  };
  ChildNode.prototype.replaceWith = function(){};
  function ChildNode(){}
  return ChildNode;
}());
NonDocumentTypeChildNode = (function(){
  NonDocumentTypeChildNode.displayName = 'NonDocumentTypeChildNode';
  var prototype = NonDocumentTypeChildNode.prototype, constructor = NonDocumentTypeChildNode;
  NonDocumentTypeChildNode.prototype.previousElementSibling = Element;
  NonDocumentTypeChildNode.prototype.nextElementSibling = Element;
  function NonDocumentTypeChildNode(){}
  return NonDocumentTypeChildNode;
}());
function generate(it){
  var getAttributes, tag;
  getAttributes = function(it){
    return (function(){
      var i$, x$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = it).length; i$ < len$; ++i$) {
        x$ = ref$[i$];
        results$.push(x$.name + '="' + x$.value + '"');
      }
      return results$;
    }()).join(' ');
  };
  tag = it.tagname;
  if (it.id) {
    tag += ' id="' + it.id + '"';
  }
  if (it.classList) {
    tag += ' class="' + (function(){
      var i$, x$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = it.classList).length; i$ < len$; ++i$) {
        x$ = ref$[i$];
        results$.push(x$);
      }
      return results$;
    }()).join(' ') + '"';
  }
  if (it.hasAttributes()) {
    tag += getAttributes(it.attributes);
  }
  return tag;
}
Element = (function(superclass){
  var prototype = extend$((import$(Element, superclass).displayName = 'Element', Element), superclass).prototype, constructor = Element;
  Element.prototype.attributes = false && NamedNodeMap;
  Element.prototype.childElementCount = Number;
  Element.prototype.children = HTMLCollection;
  Element.prototype.classList = false && DOMTokenList;
  Element.prototype.className = String;
  Element.prototype.clientHeight = Number;
  Element.prototype.clientLeft = Number;
  Element.prototype.clientTop = Number;
  Element.prototype.clientWidth = Number;
  Element.prototype.firstElementChild = Element;
  Element.prototype.id = false && String;
  Object.defineProperty(Element.prototype, 'innerHTML', {
    get: function(){
      var toString;
      toString = function(it){
        if (it instanceof Element) {
          return ("<" + generate(it) + ">\n") + it.innerHTML + ("\n</" + it.tagname + ">");
        } else {
          return node.textContent;
        }
      };
      return (function(){
        var i$, x$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = this.childNodes).length; i$ < len$; ++i$) {
          x$ = ref$[i$];
          results$.push(toString(x$));
        }
        return results$;
      }.call(this)).join('\n');
    },
    configurable: true,
    enumerable: true
  });
  Element.prototype.lastElementChild = Element;
  Element.prototype.localName = String;
  Element.prototype.namespaceURI = 'http://www.w3.org/1999/xhtml' || null;
  Element.prototype.nextElementSibling = Element;
  Object.defineProperty(Element.prototype, 'outerHTML', {
    get: function(){
      return ("<" + generate(this) + ">\n") + this.innerHTML + ("\n</" + this.tagname + ">");
    },
    configurable: true,
    enumerable: true
  });
  Element.prototype.prefix = String;
  Element.prototype.previousElementSibling = Element;
  Element.prototype.scrollHeight = Number;
  Element.prototype.scrollLeft = Number;
  Element.prototype.scrollLeftMax = Number;
  Element.prototype.scrollTop = Number;
  Element.prototype.scrollTopMax = Number;
  Element.prototype.scrollWidth = Number;
  Element.prototype.shadowRoot = '';
  Element.prototype.tabStop = Boolean;
  Element.prototype.tagname = String;
  Element.prototype.ongotpointercapture = function(){};
  Element.prototype.onlostpointercapture = function(){};
  Element.prototype.onwheel = function(){};
  Element.prototype.addEventListener = function(){};
  Element.prototype.attachShadow = function(){
    return ShadowRoot;
  };
  Element.prototype.animate = function(){};
  Element.prototype.closest = function(){
    return Element;
  };
  Element.prototype.dispatchEvent = function(){};
  Element.prototype.find = function(){};
  Element.prototype.findAll = function(){};
  Element.prototype.getAnimations = function(){};
  Element.prototype.getAttribute = function(name){
    return Object;
  };
  Element.prototype.getAttributeNames = function(){
    return Array;
  };
  Element.prototype.getAttributeNS = function(){
    return Object;
  };
  Element.prototype.getBoundingClientRect = function(){};
  Element.prototype.getClientRects = function(){};
  Element.prototype.getDestinationInsertionPoints = function(){};
  Element.prototype.getElementsByClassName = function(){
    return HTMLCollection;
  };
  Element.prototype.getElementsByTagName = function(){
    return HTMLCollection;
  };
  Element.prototype.hasAttribute = function(name){
    return Boolean;
  };
  Element.prototype.hasAttributeNS = function(){
    return Boolean;
  };
  Element.prototype.hasAttributes = function(){
    return Boolean;
  };
  Element.prototype.insertAdjacentElement = function(){};
  Element.prototype.insertAdjacentHTML = function(){};
  Element.prototype.insertAdjacentText = function(){};
  Element.prototype.matches = function(selector){
    return Boolean;
  };
  Element.prototype.querySelector = function(selector){
    return Node;
  };
  Element.prototype.querySelectorAll = function(selector){
    return NodeList;
  };
  Element.prototype.releasePointerCapture = function(){};
  Element.prototype.remove = function(){};
  Element.prototype.removeAttribute = function(){};
  Element.prototype.removeAttributesNS = function(){};
  Element.prototype.removeEventListener = function(){};
  Element.prototype.requestFullscreen = function(){};
  Element.prototype.requestPointerLock = function(){};
  Element.prototype.scrollIntoView = function(){};
  Element.prototype.setAttribute = function(name, value){
    return this.attributes.setNamedItem(name, value);
  };
  Element.prototype.setAttributeNS = function(){};
  Element.prototype.setCapture = function(){};
  Element.prototype.setPointerCapture = function(){};
  function Element(){
    Element.superclass.call(this);
    this.attributes = new NamedNodeMap();
  }
  return Element;
}(Node));
document = new Document();
doctype = new Node();
doctype.nodeType = Node.DOCUMENT_TYPE_NODE;
doctype.nodeValue = '<!doctype html>';
doctype.textContent = doctype.nodeValue;
html = document.createElement('html');
head = document.createElement('head');
body = document.createElement('body');
document.doctype = doctype;
document.head = head;
document.body = body;
html.appendChild(head);
html.appendChild(body);
document.appendChild(doctype);
document.appendChild(html);
provide = function(){
  return global.document = document;
};
out$.document = document;
out$.provide = provide;
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}