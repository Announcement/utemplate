var Template,Alchemist,Nudist;Nudist=function(e){"use strict";function t(e){this.expose(e)}var n,i;return i=t,n=t.prototype,i.className="Nudist",n.expose=function(e,t){"function"==typeof define&&define(e.name.toLowerCase(),[],function(){return e}),"undefined"!=typeof module&&(module.exports=e),"undefined"!=typeof window&&(window[e.name]=e),"undefined"!=typeof global&&(global[e.name]=e),"undefined"!=typeof t&&(t[e.name]=e)},n.toString=function(){return"[object "+this.name+"]"},t}(this),Alchemist=function(e){"use strict";function t(e){this.setElement(e)}var n,i,r;return i=t,n=t.prototype,i.className="Alchemist",r={},r.invalidElement="Invalid or unknown element was specified.",r.invalidElement=new Error(r.invalidElement),n.asElement=function(e){return e.constructor===String&&(e=document.querySelector(e)),"undefined"!=typeof jQuery&&e.constructor===jQuery&&(e=e.get(0)),e instanceof Element&&"TEMPLATE"===e.tagName&&(e=e.content),e instanceof DocumentFragment&&e.hasChildNodes()&&(e=e.firstElementChild),e instanceof Element?e:r.invalidElement},n.setElement=function(e){return this.element=this.asElement(e),this.element},n.getElement=function(){return this.element},n.toString=function(){return"[object "+this.name+"]"},t}(),Template=function(e){"use strict";function t(e,t){var n,i,r;return n=/[.{}]/g,i=function(e){return e},r=function(e,t){return e[t]},t.split(n).filter(i).reduce(r,e)}function n(e){return!!e}function i(e){this.initialize(),this.setElement(e)}var r,o;return o=i,r=i.prototype,o.className="Template",r.setElement=function(e){return"undefined"!=typeof Alchemist&&(e=Alchemist.prototype.asElement(e)),this.element=e,e},r.compile=function(e,n){var i,r;return i=/\{([^}]+)\}/g,r=function(e,i){return t(n,i)},e=e.trim(),e=e.replace(i,r)},r.crawl=function(e,t){var n,i,r,o;return r=this,o=arguments,n=function(e){var n,i;return i=function(n){var i;e.hasAttribute(n.name)&&(i=r.compile(n.value,t),e.setAttribute(n.name,i))},n=[].slice.call(e.attributes,0),n.map(i)},i=function(){var n,i,o,s,u=document.TEXT_NODE,c=document.ELEMENT_NODE;return n=function(t,n,i){e.childNodes[n]=r.crawl(t,i)},i=function(t,n,i){var o;o=r.compile(t.textContent,i),e.childNodes[n].textContent=o},s=function(e,r){e.nodeType===u&&i(e,r,t),e.nodeType===c&&n(e,r,t)},o=[].slice.call(e.childNodes,0),o.map(s)},e.hasAttributes()&&n(e,t),e.hasChildNodes()&&i(e,t),e},r.prepare=function(e){var t,i,r,o,s;return n(e)?(t=this.element.cloneNode(!0),o=this.crawl(t,e),i=t.innerHTML,r=/\{([^}]+)\}/g,this.appendSources(e),s=btoa(function(){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=escape(e[n]));return JSON.stringify(e)}()),t.template=this,t.rendered=s,t):void 0},r.render=function(){return this.sources.map(function(e){this.pipeline.reduce(function(e,t){return"function"==typeof t?t(e):"undefined"!=typeof t.childNodes?function(e,n){for(var i=0;i<n.length;i++)if("undefined"!=typeof n[i].rendered&&n[i].rendered===e.rendered)return t.replaceChild(e,n[i]);return t.appendChild(e),e}.call(this,this.prepare(e),t.childNodes):t(e)}.bind(this),e)}.bind(this)),this.sources=[],this},r.appendSources=function(e){return e.constructor===Array?e.map(this.appendSources):(this.sources.push(e),e)},r.pipe=function(e){var t;switch(t=this.pipeline.indexOf(e),typeof e){case"undefined":return this;case"function":break;case"object":return this.appendSources(e),this;default:e=i.prototype.setElement(e)}return-1!==t?this.pipeline.splice(t,1,e):this.pipeline.push(e),this.render(),this},r.initialize=function(){this.pipeline=[],this.sources=[]},r.toString=function(){return"[object "+this.name+"]"},i}(),new Nudist(Template);
//# sourceMappingURL=data:application/json;base64,
